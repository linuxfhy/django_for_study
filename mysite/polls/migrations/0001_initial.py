# -*- coding: utf-8 -*-
# Generated by Django 1.11.6 on 2017-10-23 00:12
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice_text', models.CharField(max_length=200)),
                ('votes', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='DeviceCardModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summary', models.CharField(max_length=200, verbose_name='设备描述')),
                ('device_info', models.CharField(default='【归属小组】:', max_length=2000, verbose_name='设备信息')),
                ('current_process', models.CharField(default='##闲置OR使用##', max_length=200, verbose_name='当前使用状态')),
                ('occupied_by', models.CharField(default='#使用人更新#', max_length=200, verbose_name='设备使用人')),
                ('assigned_to', models.CharField(default='anyone', max_length=200, verbose_name='分配给(只读)')),
                ('created_by', models.CharField(default='', max_length=200, verbose_name='创建人(只读)')),
                ('curent_state', models.CharField(max_length=200, verbose_name='当前状态(只读)')),
            ],
        ),
        migrations.CreateModel(
            name='IssueTrackModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summary', models.CharField(default='【20170101】XX局点XX设备发生XX问题', max_length=200, verbose_name='概要')),
                ('detail', models.CharField(max_length=5000, verbose_name='详细描述')),
                ('current_process', models.CharField(default='##由维护处理人填写##', max_length=5000, verbose_name='处理进展')),
                ('issue_level', models.CharField(choices=[('一级事故', '一级事故'), ('二级事故', '二级事故'), ('三级事故', '三级事故'), ('一级ITR', '一级ITR'), ('二级ITR', '二级ITR'), ('三级ITR', '三级ITR'), ('A级重大问题', 'A级重大问题'), ('B级重大问题', 'B级重大问题'), ('C级重大问题', 'C级重大问题'), ('一般问题', '一般问题')], max_length=200, verbose_name='问题级别')),
                ('customer_type', models.CharField(choices=[('jinrong', '金融'), ('dianli', '电力'), ('nengyuan', '能源'), ('guangdian', '广电'), ('meizi', '媒资')], max_length=200, verbose_name='客户类别')),
                ('class_1', models.CharField(choices=[('软件', '软件'), ('硬件', '硬件'), ('结构', '结构'), ('误操作', '误操作'), ('配置', '配置')], max_length=200, verbose_name='问题大类')),
                ('class_2', models.CharField(choices=[('软件', (('FC', 'FC'), ('SAS', 'SAS'))), ('硬件', (('内存', '内存'), ('板卡', '板卡'), ('线缆', '线缆'))), ('误操作', '误操作'), ('结构', '结构'), ('配置', '配置')], max_length=200, verbose_name='问题小类')),
                ('class_3', models.CharField(choices=[('软件', (('FC', 'FC'), ('SAS', 'SAS'))), ('硬件', (('内存', '内存'), ('板卡', '板卡'), ('线缆', '线缆'))), ('误操作', '误操作'), ('配置', '配置')], max_length=200, verbose_name='责任领域')),
                ('buglist_url', models.CharField(default='#Buglist单链接(若有)#', max_length=200, verbose_name='Buglist链接(URL)')),
                ('improvement_url', models.CharField(default='#改进单链接(若有)#', max_length=200, verbose_name='改进项链接(URL)')),
                ('issue_processor', models.CharField(default='#提交人填写#', max_length=200, verbose_name='维护处理人')),
                ('issue_checkor', models.CharField(default='#维护处理人指定#', max_length=200, verbose_name='维护代表')),
                ('issue_se', models.CharField(default='#维护代表指定#', max_length=200, verbose_name='改进提取SE')),
                ('assigned_to', models.CharField(default='', max_length=200, verbose_name='当前处理人(只读)')),
                ('created_by', models.CharField(default='', max_length=200, verbose_name='创建人(只读)')),
                ('curent_state', models.CharField(max_length=200, verbose_name='当前状态(只读)')),
            ],
        ),
        migrations.CreateModel(
            name='NameModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summary', models.CharField(max_length=200, verbose_name='概要')),
                ('detail', models.CharField(max_length=5000, verbose_name='详细描述')),
                ('current_process', models.CharField(default='##由改进实施人填写##', max_length=5000, verbose_name='处理进展')),
                ('value', models.CharField(default='0', max_length=200, verbose_name='改进价值评估')),
                ('reviewer', models.CharField(default='#提交人填写#', max_length=200, verbose_name='改进建议评审人')),
                ('executor', models.CharField(default='#由建议评审人指派#', max_length=200, verbose_name='改进建议实施人')),
                ('assigned_to', models.CharField(default='', max_length=200, verbose_name='当前处理人(只读)')),
                ('created_by', models.CharField(default='', max_length=200, verbose_name='创建人(只读)')),
                ('curent_state', models.CharField(max_length=200, verbose_name='当前状态(只读)')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.CharField(max_length=200)),
                ('pub_date', models.DateTimeField(verbose_name='date published')),
            ],
        ),
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=50)),
                ('password', models.CharField(max_length=50)),
                ('email', models.EmailField(default='example@example.com', max_length=254)),
            ],
        ),
        migrations.AddField(
            model_name='choice',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.Question'),
        ),
    ]
